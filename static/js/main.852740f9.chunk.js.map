{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","styles/globalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","totalSupply","cost","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","console","log","Screen","styled","div","image","SpacerSmall","SpacerMedium","SpacerLarge","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","truncate","input","len","length","substring","StyledButton","button","ResponsiveWrapper","StyledLogo","img","StyledImg","StyledLink","App","useDispatch","useSelector","useState","CONTRACT_ADDRESS","SCAN_LINK","NETWORK","NAME","SYMBOL","ID","NFT_NAME","MAX_SUPPLY","WEI_COST","DISPLAY_COST","GAS_LIMIT","MARKETPLACE","MARKETPLACE_LINK","SHOW_BACKGROUND","CONFIG","SET_CONFIG","getData","getConfig","fetch","headers","Accept","configResponse","json","config","useEffect","style","padding","backgroundColor","alt","src","borderRadius","textAlign","fontSize","fontWeight","color","target","href","onClick","e","window","open","transform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.852740f9.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  totalSupply: 0,\n  cost: 0,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        totalSupply: action.payload.totalSupply,\n        // cost: action.payload.cost,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","import styled from \"styled-components\";\n\n// Used for wrapping a page component\nexport const Screen = styled.div`\n  background-color: var(--primary);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\n// Used for providing space between components\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\n// Used for providing space between components\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\n// Used for providing space between components\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\n// Used for providing space between components\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\n// Used for providing a wrapper around a component\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--primary-text);\n  font-size: 22px;\n  font-weight: 500;\n  line-height: 1.6;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--primary-text);\n  font-size: 18px;\n  line-height: 1.6;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--primary-text);\n  font-size: 16px;\n  line-height: 1.6;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\n\n\n\nconst launch = false;\n\nconst truncate = (input, len) =>\n  input.length > len ? `${input.substring(0, len)}...` : input;\n\nexport const StyledButton = styled.button`\n  padding: 10px;\n  border-radius: 4px;\n  border: none;\n  background-color: var(--secondary);\n  padding: 10px;\n  font-weight: bold;\n  color: var(--secondary-text);\n  width: 300px;\n  height: 100px;\n  cursor: pointer;\n  // box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\n  // -webkit-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\n  // -moz-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\n  // :active {\n  //   box-shadow: none;\n  //   -webkit-box-shadow: none;\n  //   -moz-box-shadow: none;\n  // }\n`;\n\nexport const StyledRoundButton = styled.button`\n  padding: 10px;\n  border-radius: 4px;\n  border: none;\n  background-color: var(--primary);\n  padding: 10px;\n  font-weight: bold;\n  font-size: 15px;\n  color: var(--primary-text);\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  // box-shadow: 0px 4px 0px -2px rgba(250, 250, 250, 0.3);\n  // -webkit-box-shadow: 0px 4px 0px -2px rgba(250, 250, 250, 0.3);\n  // -moz-box-shadow: 0px 4px 0px -2px rgba(250, 250, 250, 0.3);\n  // :active {\n  //   box-shadow: none;\n  //   -webkit-box-shadow: none;\n  //   -moz-box-shadow: none;\n  // }\n`;\n\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\n\nexport const StyledLogo = styled.img`\n  width: 200px;\n  @media (min-width: 767px) {\n    width: 300px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n`;\n\nexport const StyledImg = styled.img`\n  // box-shadow: 0px 5px 11px 2px rgba(0, 0, 0, 0.7);\n  //border: 4px var(--secondary);\n  background-color: var(--accent);\n  border-radius: 4px;\n  width: 200px;\n  @media (min-width: 900px) {\n    width: 250px;\n  }\n  @media (min-width: 1000px) {\n    width: 300px;\n  }\n  transition: width 0.5s;\n`;\n\nexport const StyledLink = styled.a`\n  color: var(--secondary);\n  text-decoration: none;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [feedback, setFeedback] = useState(`Click buy to mint your NFT.`);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [CONFIG, SET_CONFIG] = useState({\n    CONTRACT_ADDRESS: \"\",\n    SCAN_LINK: \"\",\n    NETWORK: {\n      NAME: \"\",\n      SYMBOL: \"\",\n      ID: 0,\n    },\n    NFT_NAME: \"\",\n    SYMBOL: \"\",\n    MAX_SUPPLY: 1,\n    WEI_COST: 0,\n    DISPLAY_COST: 0,\n    GAS_LIMIT: 0,\n    MARKETPLACE: \"\",\n    MARKETPLACE_LINK: \"\",\n    SHOW_BACKGROUND: false,\n  });\n\n  const claimNFTs = () => {\n    let cost = CONFIG.WEI_COST;\n    let gasLimit = CONFIG.GAS_LIMIT;\n    let totalCostWei = String(cost * mintAmount);\n    let totalGasLimit = String(gasLimit * mintAmount);\n    console.log(\"Cost: \", totalCostWei);\n    console.log(\"Gas limit: \", totalGasLimit);\n    setFeedback(`Minting your ${CONFIG.NFT_NAME}...`);\n    setClaimingNft(true);\n    blockchain.smartContract.methods\n      .mint(mintAmount)\n      .send({\n        gasLimit: String(totalGasLimit),\n        to: CONFIG.CONTRACT_ADDRESS,\n        from: blockchain.account,\n        value: totalCostWei,\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setFeedback(\"Sorry, something went wrong please try again later.\");\n        setClaimingNft(false);\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setFeedback(\n          `WOW, the ${CONFIG.NFT_NAME} is yours! go visit Opensea.io to view it.`\n        );\n        setClaimingNft(false);\n        dispatch(fetchData(blockchain.account));\n      });\n  };\n\n  const decrementMintAmount = () => {\n    let newMintAmount = mintAmount - 1;\n    if (newMintAmount < 1) {\n      newMintAmount = 1;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const incrementMintAmount = () => {\n    let newMintAmount = mintAmount + 1;\n    if (newMintAmount > 10) {\n      newMintAmount = 10;\n    }\n    setMintAmount(newMintAmount);\n  };\n\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  };\n\n  const routeChange=()=> {\n    let URL = `https://discord.gg/bHaGsTy5D6`;\n    window.open(URL, '_blank');\n  }\n\n  const getConfig = async () => {\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const config = await configResponse.json();\n    SET_CONFIG(config);\n  };\n\n  useEffect(() => {\n    getConfig();\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, [blockchain.account]);\n\n  if (launch){\n    return (\n      <s.Screen>\n        <s.Container\n          flex={1}\n          ai={\"center\"}\n          style={{ padding: 24, backgroundColor: \"var(--primary)\" }}\n          image={CONFIG.SHOW_BACKGROUND ? \"/config/images/bg.png\" : null}\n        >\n          <StyledLogo alt={\"logo\"} src={\"/config/images/logo.png\"} />\n          <s.SpacerSmall />\n          <ResponsiveWrapper flex={1} style={{ padding: 24 }} test>\n            <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n              <StyledImg alt={\"example\"} src={\"/config/images/example.gif\"} />\n            </s.Container>\n            <s.SpacerLarge />\n            <s.Container\n              flex={2}\n              jc={\"center\"}\n              ai={\"center\"}\n              style={{\n                backgroundColor: \"var(--accent)\",\n                padding: 24,\n                borderRadius: 4,\n                //border: \"4px var(--secondary)\",\n                //boxShadow: \"0px 5px 11px 2px rgba(0,0,0,0.7)\",\n              }}\n            >\n              <s.TextTitle\n                style={{\n                  textAlign: \"center\",\n                  fontSize: 50,\n                  fontWeight: \"bold\",\n                  color: \"var(--accent-text)\",\n                }}\n              >\n                {data.totalSupply} / {CONFIG.MAX_SUPPLY}\n              </s.TextTitle>\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  color: \"var(--primary-text)\",\n                }}\n              >\n                <StyledLink target={\"_blank\"} href={CONFIG.SCAN_LINK}>\n                  {truncate(CONFIG.CONTRACT_ADDRESS, 15)}\n                </StyledLink>\n              </s.TextDescription>\n              <s.SpacerSmall />\n              {Number(data.totalSupply) >= CONFIG.MAX_SUPPLY ? (\n                <>\n                  <s.TextTitle\n                    style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\n                  >\n                    The sale has ended.\n                  </s.TextTitle>\n                  <s.TextDescription\n                    style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\n                  >\n                    You can still find {CONFIG.NFT_NAME} on\n                  </s.TextDescription>\n                  <s.SpacerSmall />\n                  <StyledLink target={\"_blank\"} href={CONFIG.MARKETPLACE_LINK}>\n                    {CONFIG.MARKETPLACE}\n                  </StyledLink>\n                </>\n              ) : (\n                <>\n                  <s.TextTitle\n                    style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\n                  >\n                    1 {CONFIG.SYMBOL} costs {CONFIG.DISPLAY_COST}{\" \"}\n                    {CONFIG.NETWORK.SYMBOL}.\n                  </s.TextTitle>\n                  <s.SpacerXSmall />\n                  <s.TextDescription\n                    style={{ textAlign: \"center\", color: \"var(--accent-text)\" }}\n                  >\n                    Excluding gas fees.\n                  </s.TextDescription>\n                  <s.SpacerSmall />\n                  {blockchain.account === \"\" ||\n                  blockchain.smartContract === null ? (\n                    <s.Container ai={\"center\"} jc={\"center\"}>\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--accent-text)\",\n                        }}\n                      >\n                        Connect to the {CONFIG.NETWORK.NAME} network\n                      </s.TextDescription>\n                      <s.SpacerSmall />\n                      <StyledButton\n                        onClick={(e) => {\n                          e.preventDefault();\n                          dispatch(connect());\n                          getData();\n                        }}\n                      >\n                        CONNECT\n                      </StyledButton>\n                      {blockchain.errorMsg !== \"\" ? (\n                        <>\n                          <s.SpacerSmall />\n                          <s.TextDescription\n                            style={{\n                              textAlign: \"center\",\n                              color: \"var(--accent-text)\",\n                            }}\n                          >\n                            {blockchain.errorMsg}\n                          </s.TextDescription>\n                        </>\n                      ) : null}\n                    </s.Container>\n                  ) : (\n                    <>\n                      <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--accent-text)\",\n                        }}\n                      >\n                        {feedback}\n                      </s.TextDescription>\n                      <s.SpacerMedium />\n                      <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                        <StyledRoundButton\n                          style={{ lineHeight: 0.4 }}\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            decrementMintAmount();\n                          }}\n                        >\n                          -\n                        </StyledRoundButton>\n                        <s.SpacerMedium />\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--accent-text)\",\n                          }}\n                        >\n                          {mintAmount}\n                        </s.TextDescription>\n                        <s.SpacerMedium />\n                        <StyledRoundButton\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            incrementMintAmount();\n                          }}\n                        >\n                          +\n                        </StyledRoundButton>\n                      </s.Container>\n                      <s.SpacerSmall />\n                      <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                        <StyledButton\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            claimNFTs();\n                            getData();\n                          }}\n                        >\n                          {claimingNft ? \"BUSY\" : \"MINT\"}\n                        </StyledButton>\n                      </s.Container>\n                    </>\n                  )}\n                </>\n              )}\n              <s.SpacerMedium />\n            </s.Container>\n            <s.SpacerLarge />\n            <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n              <StyledImg\n                alt={\"example\"}\n                src={\"/config/images/example.gif\"}\n                style={{ transform: \"scaleX(-1)\" }}\n              />\n            </s.Container>\n          </ResponsiveWrapper>\n          <s.SpacerMedium />\n          <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                color: \"var(--primary-text)\",\n              }}\n            >\n              Please make sure you are connected to the right network (\n              {CONFIG.NETWORK.NAME} Mainnet) and the correct address. Please note:\n              Once you make the purchase, you cannot undo this action.\n            </s.TextDescription>\n            <s.SpacerSmall />\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                color: \"var(--primary-text)\",\n              }}\n            >\n              We have set the gas limit to {CONFIG.GAS_LIMIT} for the contract to\n              successfully mint your NFT. We recommend that you don't lower the\n              gas limit.\n            </s.TextDescription>\n          </s.Container>\n        </s.Container>\n      </s.Screen>\n    );\n  }\n  // Placeholder scene\n  else if (!launch){\n    return (\n      <s.Screen>\n        <s.Container\n          flex={1}\n          ai={\"center\"}\n          style={{ padding: 24, backgroundColor: \"var(--primary)\" }}\n          image={CONFIG.SHOW_BACKGROUND ? \"/config/images/bg.png\" : null}\n        >\n          <StyledLogo alt={\"logo\"} src={\"/config/images/logo.png\"} />\n          <s.SpacerSmall />\n          <ResponsiveWrapper flex={1} style={{ padding: 24 }} test>\n            <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n              <StyledImg alt={\"example\"} src={\"/config/images/example.gif\"} />\n            </s.Container>\n            <s.SpacerLarge />\n            <s.Container\n              flex={2}\n              jc={\"center\"}\n              ai={\"center\"}\n              style={{\n                backgroundColor: \"var(--accent)\",\n                padding: 24,\n                borderRadius: 4,\n                //border: \"4px var(--secondary)\",\n                //boxShadow: \"0px 5px 11px 2px rgba(0,0,0,0.7)\",\n              }}\n            >\n              <s.TextTitle\n                style={{\n                  textAlign: \"center\",\n                  fontSize: 50,\n                  fontWeight: \"bold\",\n                  color: \"var(--accent-text)\",\n                }}\n              >\n                Coming Soon!\n              </s.TextTitle>\n              <s.SpacerSmall />\n              <s.TextDescription\n                style={{\n                  textAlign: \"center\",\n                  color: \"var(--primary-text)\",\n                }}\n              >\n                <StyledLink target={\"_blank\"} href={CONFIG.SCAN_LINK}>\n                  {truncate(CONFIG.CONTRACT_ADDRESS, 15)}\n                </StyledLink>\n              </s.TextDescription>\n                <>\n                  <s.SpacerSmall />\n                  {blockchain.account === \"\" ||\n                  blockchain.smartContract === null ? (\n                    <s.Container ai={\"center\"} jc={\"center\"}>\n                      {/* <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--accent-text)\",\n                        }}\n                      >\n                        Join the us!\n                      </s.TextDescription> */}\n                      <s.SpacerSmall />\n                      \n                      <StyledButton\n                        onClick={(e) => {routeChange();}}\n                      >\n                        Discord\n                      </StyledButton>\n                     \n                      {blockchain.errorMsg !== \"\" ? (\n                        <>\n                          <s.SpacerSmall />\n                          <s.TextDescription\n                            style={{\n                              textAlign: \"center\",\n                              color: \"var(--accent-text)\",\n                            }}\n                          >\n                            {blockchain.errorMsg}\n                          </s.TextDescription>\n                        </>\n                      ) : null}\n                    </s.Container>\n                  ) : (\n                    <>\n                      {/* <s.TextDescription\n                        style={{\n                          textAlign: \"center\",\n                          color: \"var(--accent-text)\",\n                        }}\n                      >\n                        {feedback}\n                      </s.TextDescription>\n                      <s.SpacerMedium />\n                      <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                        <StyledRoundButton\n                          style={{ lineHeight: 0.4 }}\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            decrementMintAmount();\n                          }}\n                        >\n                          -\n                        </StyledRoundButton>\n                        <s.SpacerMedium />\n                        <s.TextDescription\n                          style={{\n                            textAlign: \"center\",\n                            color: \"var(--accent-text)\",\n                          }}\n                        >\n                          {mintAmount}\n                        </s.TextDescription>\n                        <s.SpacerMedium />\n                        <StyledRoundButton\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            incrementMintAmount();\n                          }}\n                        >\n                          +\n                        </StyledRoundButton>\n                      </s.Container>\n                      <s.SpacerSmall />\n                      <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                        <StyledButton\n                          disabled={claimingNft ? 1 : 0}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            claimNFTs();\n                            getData();\n                          }}\n                        >\n                          {claimingNft ? \"BUSY\" : \"MINT\"}\n                        </StyledButton>\n                      </s.Container> */}\n                    </>\n                  )}\n                </>\n              <s.SpacerMedium />\n            </s.Container>\n            <s.SpacerLarge />\n            <s.Container flex={1} jc={\"center\"} ai={\"center\"}>\n              <StyledImg\n                alt={\"example\"}\n                src={\"/config/images/example.gif\"}\n                style={{ transform: \"scaleX(-1)\" }}\n              />\n            </s.Container>\n          </ResponsiveWrapper>\n          <s.SpacerMedium />\n          {/* <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                color: \"var(--primary-text)\",\n              }}\n            >\n              Please make sure you are connected to the right network (\n              {CONFIG.NETWORK.NAME} Mainnet) and the correct address. Please note:\n              Once you make the purchase, you cannot undo this action.\n            </s.TextDescription>\n            <s.SpacerSmall />\n            <s.TextDescription\n              style={{\n                textAlign: \"center\",\n                color: \"var(--primary-text)\",\n              }}\n            >\n              We have set the gas limit to {CONFIG.GAS_LIMIT} for the contract to\n              successfully mint your NFT. We recommend that you don't lower the\n              gas limit.\n            </s.TextDescription>\n          </s.Container> */}\n        </s.Container>\n      </s.Screen>\n    );\n  }\n  \n\n  \n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}